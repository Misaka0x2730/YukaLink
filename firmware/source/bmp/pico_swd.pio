; This file contains the programs responsible for the SWD interface functionality for MioLink revB.
; 4 programs are implemented here:

; swd_in - a program that reads bits from the TMS pin;
; swd_in_parity - a program that reads bits from the TMS pin and returns the TMS pin to an output state at the end;
; swd_out - a program that outputs bits to the TMS pin;
; swd_adiv5_req - a program that sends a standard 8-bit ADIv5 request and reads the ACK.

; Pin mapping for all programs:
; IN - TMS
; OUT - TMS
; Side-set - TCK
; Set - TMS (to change direction through set pindirs).

; Additional 3 delay cycles reduce the time spent on non-data instructions, but at the same time
; limit the maximum interface frequency. In our case (3 additional delay cycles after each edge),
; the limit is set to sys_clk / 8, as 3 + 1 + 3 + 1 = 8.

; swdptap_seq_in program (SM0)
.program pico_swd_in
.pio_version 0
.origin 0
.side_set 1 opt

; Autopull should be enabled, with a threshold of 32.
; Autopush also should be enabled, with a threshold of 32.

swd_in_out_to_in:              ; TMS turnaround from output to input state
    set pindirs, 0 side 1 [2]  ; set TMS direction to input and a rising edge on TCK

.wrap_target

swd_in:                                 ; TMS sequence in program, swdptap_seq_in program (SM0) start,
                                        ; TMS direction should be input
    out x, 32 side 0                    ; load the number of cycles from TX FIFO
    swd_in_loop:
        in pins, 1 side 0 [3]           ; read TMS pin state into ISR and a falling edge on TCK
        jmp x-- swd_in_loop side 1 [3]  ; decrement the cycle counter and a rising edge on TCK

    push side 0 [2]                    ; push ISR content to RX FIFO when cycle counter < 32 (autopush threshold)
                                       ; and a falling edge on TCK

.wrap

; swdptap_seq_in_parity program (SM1)
.program pico_swd_in_parity
.pio_version 0
.origin 5
.side_set 1 opt

; Autopull should be enabled, with a threshold of 32.
; Autopush also should be enabled, with a threshold of 32.

swd_in_parity_out_to_in:       ; TMS turnaround from output to input state
    set pindirs, 0 side 1 [2]  ; set TMS direction to input and a rising edge on TCK

.wrap_target

swd_in_parity:                                 ; TMS sequence in program, swdptap_seq_in_parity program (SM1) start,
                                               ; TMS direction should be input
    out x, 32 side 0                           ; load the number of cycles from TX FIFO
    swd_in_parity_loop:
        in pins, 1 side 0 [3]                  ; read TMS pin state into ISR and a falling edge on TCK
        jmp x-- swd_in_parity_loop side 1 [3]  ; decrement the cycle counter and a rising edge on TCK

    push side 0 [2]                ; push ISR content to RX FIFO when cycle counter < 32 (autopush threshold)
                                   ; and a falling edge on TCK

    swd_in_parity_in_to_out:       ; TMS turnaround from input to output state
        set pindirs, 1 side 1 [3]  ; set TMS direction to output and a rising edge on TCK
        nop side 0 [2]             ; falling edge on TCK

.wrap

; swdptap_seq_out and swdptap_seq_out_parity program (SM2)
.program pico_swd_out
.pio_version 0
.origin 12
.side_set 1 opt

; Autopull should be enabled, with a threshold of 32.
; Autopush also should be enabled, with a threshold of 32.

swd_out_in_to_out:                  ; TMS turnaround from input to output state
    set pindirs, 1 side 1 [2]       ; set TMS direction to output and a rising edge on TCK

.wrap_target

swd_out:                            ; TMS sequence out program,
                                    ; swdptap_seq_out and swdptap_seq_out_parity programs (SM2) start
                                    ; TMS direction should be output
    pull                            ; load the cycle counter (no-op when the ISR is full, because autopull is enabled)
    out x, 32                       ; load the number of cycles from TX FIFO
    swd_out_loop:
        out pins, 1 side 0 [3]           ; output TMS pin state and a falling edge on TCK
        jmp x-- swd_out_loop side 1 [3]  ; decrement the cycle counter and a rising edge on TCK

    nop side 0 [2]                       ; falling edge on TCK

.wrap

; This program sends ADIv5 request and reads ACK (SM3)
.program pico_swd_adiv5_req
.pio_version 0
.origin 18
.side_set 1 opt

; Autopull should be enabled, with a threshold of 8 (request length).
; Autopush also should be enabled, with a threshold of 3 (ACK length).

swd_adiv5_req_in_to_out:       ; TMS turnaround from input to output state for the SWD ADIv5 request.
    set pindirs, 1 side 1 [2]  ; set TMS direction to output and a rising edge on TCK

.wrap_target

swd_adiv5_req:                          ; SWD ADIv5 request program (send request and read ACK).
                                        ; swd_adiv5_req program (SM3) start.
                                        ; for this program, the autopull threshold should be 8
                                        ; and the autopush threshold should be 3.
    set x, 7                            ; set the cycle counter, should be (number of cycles - 1).
                                        ; the request length is 8, so set x to 8-1=7.
    swd_adiv5_req_out_loop:                        ; send 8-bit request.
        out pins, 1 side 0 [3]                     ; output TMS pin state and a falling edge on TCK
        jmp x-- swd_adiv5_req_out_loop side 1 [3]  ; decrement the cycle counter and a rising edge on TCK
    set x, 2 side 0 [3]                            ; set the cycle counter for ACK (ACK length is 3 bits, so set x to 3-1=2)
                                                   ; and a falling edge on TCK

                               ; perform a turnaround cycle from output to input
                               ; to read the ACK after the request
    set pindirs, 0 side 1 [3]  ; set TMS direction to input and a rising edge on TCK

    swd_adiv5_req_ack_loop:                        ; read the acknowledgement.
        in pins, 1 side 0 [3]                      ; read TMS pin state into ISR and a falling edge on TCK
        jmp x-- swd_adiv5_req_ack_loop side 1 [3]  ; decrement the cycle counter and a rising edge on TCK
        nop side 0 [2]                             ; a final falling edge on TCK.

.wrap